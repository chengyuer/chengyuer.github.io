<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/11/12/hello-world/"/>
      <url>/2018/11/12/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>初遇Python</title>
      <link href="/2018/06/10/%E5%88%9D%E9%81%87Python/"/>
      <url>/2018/06/10/%E5%88%9D%E9%81%87Python/</url>
      
        <content type="html"><![CDATA[<h2 id="查看python版本"><a href="#查看python版本" class="headerlink" title="查看python版本"></a>查看python版本</h2><p>我们可以使用以下命令来查看我们使用的Python版本：<br>python -V<br>以上命令执行结果如下：<br>Python 3.3.2</p><h1 id="你也可以进入Python的交互式编程模式，查看版本："><a href="#你也可以进入Python的交互式编程模式，查看版本：" class="headerlink" title="你也可以进入Python的交互式编程模式，查看版本："></a>你也可以进入Python的交互式编程模式，查看版本：</h1><p>Python 3.3.2 (v3.3.2:d047928ae3f6, May 16 2013, 00:03:43) [MSC v.1600 32 bit (Intel)] on win32<br>Type “copyright”, “credits” or “license()” for more information.</p><h2 id="第一个Python3-x程序"><a href="#第一个Python3-x程序" class="headerlink" title="第一个Python3.x程序"></a>第一个Python3.x程序</h2><p>对于大多数程序语言，第一个入门编程代码便是”Hello World！”，以下代码为使用Python输出”Hello World！”：<br>实例(Python 3.0+)<br>print(“Hello, World!”);<br>运行实例 »<br>你可以将以上代码保存在hello.py文件中并使用python命令执行该脚本文件。<br>$ python3 hello.py<br>以上命令输出结果为：<br>Hello, World!</p><p>git 资料：<a href="http://www.cnblogs.com/alex3714/articles/5930846.html" target="_blank" rel="noopener">http://www.cnblogs.com/alex3714/articles/5930846.html</a></p><p>LINUX下的git操作：ubuntu安装   sudo  apt-get  install  git<br><a href="http://www.bjhee.com/linux-github.html" target="_blank" rel="noopener">http://www.bjhee.com/linux-github.html</a></p><p>先建立远程仓库，然后在linux里面执行mkdir ~/.ssh ,再执行ssh-keygen -t RSA -c ‘github注册的邮箱’然后再进入.ssh目录执行cat isa-key.pub将里面内容复制到远程git仓库添加密钥ssh-key(在settings里面)，然后再新建一个目录执行git init 然后再git remote add origin 远程ssh地址，git add . 再git commit -m ‘’ ;然后再git push origin master ，新建文件接着编辑完文件再进行git  add  文件名 ，接着提交git commit -m “注释信息”<br>再提交到远程仓库，git push origin master ,上面这些操作还可以创建分支，git checkout -b dev再进行提交，两条分支可以合并，可能需要手动解决冲突，解决冲突后再进行提交，再git push origin master或dev,合并完成之后可以删掉分支git branch -d 分支名</p><p>克隆之后还需要先把远程的分支拿下来git pull origin master  –allow-unrelated-histories接着再进行add,commit,push<br>远程克隆下来的需要本地创建分支继续开发git checkout -b dev origin/dev</p><p>在远程仓库克隆下来后，执行git pull origin  maste更新他的状态 接着开发，改变文件后再进行add,commit最后再git push origin master</p><p>版本合并，尽量将大功能划分成几个小的业务模块，然后几天合并一次，这样就不用说等到全部开发完了再去合并造成主分支上和dev合并冲突太大太多</p><p>git tag tagname——打标签也得先add.commit再提交git push  origin –tags,还可以提交分支<br>git tag -a tagname -m ‘注释信息’——–给标签添加注释<br>git status——查看追踪修改的文件<br>git diff 修改的文件的文件名—–查看文件改动了哪里<br>git log –pretty=oneline—–查看修改的历史有你提交的注释-m+注释的信息，所以注释信息好好写<br>git reset –hard HEAD^——–版本回退到上一个当前版本的上一个版本使用git log命令查看版本号<br>git reset –hard +版本号——-版本回退后重新回到某个版本<br>git reflog———当关闭窗口后还想找回用此命令的输出日志，接着再进行git reset –hard +版本号<br>git branch ——-查看当前所处的分支<br>git branch -d dev  ——–删除dev分支</p><p>写在.gitignore文件里面的目录或文件不会提交到git上面去但是要注意.gitignore以及忽略文件的目录。<br>.gitignore目录一般就在项目的目录下。<br>.gitignore文件可以去github上面找复制一份在自己的代码里面就行<br>.gitignore忽略规则：<a href="https://www.cnblogs.com/kevingrace/p/5690241.html" target="_blank" rel="noopener">https://www.cnblogs.com/kevingrace/p/5690241.html</a><br>例如<br>项目目录结构：</p><p>.gitignore的忽略规则：</p><p>最终github的目录结构：</p><p>在项目的目录下执行git add ,git commit ,git remote ,git push</p><p>假设需要合并master和dev分支先add 、commit ,dev分支再切换到master分支，进行git merge dev 最后提交<br>进行git push origin master</p><p>当两个分支都对一个文件进行了add、commit后在进行合并的话会产生冲突，可以手动修改冲突文件再进行add、commit最后进行git push origin master </p><p>当在一条分支上工作到一半但是不想提交的情况，可以使用git stash来保存，然后当全部做完想提交了的时候使用<br>git stash list 查看，恢复的话就直接git stash pop 来恢复再进行提交。</p><p>切换到远程的分支进行提交<br>git remote set-url origin 【giturl（ssh地址）】<br>git add .<br>git commit -b “”<br>git push origin master</p><p>git checkout -b dev origin/dev表示切换到远程的dev分支，在本地起名为dev，并切换到本地的dev分支</p><p>从远程克隆下来的东西，如果它更新了，只需要执行git  pull即可更新他的状态，接着进行后续的操作</p><p>重点的初步提交：<br>如果是自己的git ，先在远程上新建一个仓库responsebity，接着在本地进行git init ,git add ,git commit , git remote add origin 远程ssh地址，最后git push -u origin dev(master)</p>]]></content>
      
      
      
    </entry>
    
  
  
</search>
